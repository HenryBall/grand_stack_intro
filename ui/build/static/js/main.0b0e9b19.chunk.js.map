{"version":3,"sources":["components/nav.js","components/menu.js","components/movies.js","App.js","serviceWorker.js","index.js"],"names":["Header","_this","this","react_default","a","createElement","className","onClick","props","toggleHandler","Component","Input","placeholder","onChange","idInputHandler","bind","favInputHandler","searchHandler","searchBtnContent","Movies","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","movieIdx","movies","length","id","map","movie","idx","key","_id","toString","src","posterURL","alt","api","axios","create","baseURL","headers","GET_POPULAR_MOVIES","GET_RECENT_MOVIES","GET_SIMILAR_MOVIES","title","concat","GET_MOVIES_FOR_USER","userId","App","getPopularMovies","post","query","then","result","setState","popMovies","data","Movie","popular","catch","error","console","log","getRecentMovies","recentMovies","recent","getSimilarMovies","favMovie","simMovies","similar","getMoviesForUser","recoMovies","User","recomended","menuActive","loading","_this2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","event","target","value","components_nav","join","components_menu","components_movies","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","react_apollo_esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b0e9b19.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../styles/nav.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className='nav-bar'>\n      \t<div onClick={() => this.props.toggleHandler()} className='open-menu'></div>\n        <div className='nav-text'>RECOMENDATIONS</div>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nimport '../styles/menu.css';\n\nclass Input extends Component {\n  render() {\n    return (\n      <div className='menu-content'>\n        <div className='menu-nav'>\n          <div onClick={() => this.props.toggleHandler()} className='hide-menu'></div>\n        </div>\n        <div className='input-container'>\n      \t <div className='input-item'>\n            <div className='inline-icon'>\n              <div className='input-text'>USER ID</div>\n            </div>\n            <input \n              placeholder='Enter your ID'\n              onChange={this.props.idInputHandler.bind(this)}\n            />\n          </div>\n          <div className='input-item'>\n            <div className='inline-icon'>\n              <div className='input-text'>FAVORITE MOVIE</div>\n            </div>\n            <input \n              placeholder='Enter your favorite movie'\n              onChange={this.props.favInputHandler.bind(this)}\n            />\n          </div>\n        </div>\n        <div className='search-btn' onClick={() => this.props.searchHandler()}>{this.props.searchBtnContent}</div>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nimport '../styles/movies.css';\n\nclass Movies extends Component {\n\n  constructor(props) {\n    super(props);\n      this.state = {\n        movieIdx: 0\n    };\n  }\n \n  render() {\n    return (\n      <div>\n        <div className={this.props.movies.length === 0 ? '' : 'movie-feed'} id='scroll-container'>\n           {this.props.movies.map((movie, idx) => \n            <div key={movie._id} className='movie' id={idx.toString()}>\n              <img src={ movie.posterURL } alt=''/>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Nav from './components/nav';\nimport Menu from './components/menu';\nimport Movies from './components/movies';\n\nimport './App.css';\n\nconst api = axios.create({\n  baseURL: 'http://13.57.31.93:80/',\n  //baseURL: 'http://localhost:4000',\n  headers: {},\n});\n\nconst GET_POPULAR_MOVIES = `\n  {\n    Movie(title: \"Transformers\") {\n      popular {\n        _id\n        id\n        imdbID\n        plot\n        posterURL\n        title\n        tmdbID\n        imdbRating\n        metacriticRating\n        rottenTomatoesRating\n      }\n    }\n  }\n`;\n\nconst GET_RECENT_MOVIES = `\n  {\n    Movie(title: \"Transformers\") {\n      recent {\n        _id\n        id\n        imdbID\n        plot\n        posterURL\n        title\n        tmdbID\n        imdbRating\n        metacriticRating\n        rottenTomatoesRating\n      }\n    }\n  }\n`;\n\nconst GET_SIMILAR_MOVIES = (title) => `\n  {\n    Movie(title: \"${title}\") {\n      similar {\n        _id\n        id\n        imdbID\n        plot\n        posterURL\n        title\n        tmdbID\n        imdbRating\n        metacriticRating\n        rottenTomatoesRating\n      }\n    }\n  }\n`;\n\nconst GET_MOVIES_FOR_USER = (userId) => `\n  {\n    User(id: \"${userId}\") {\n      recomended {\n        _id\n        id\n        imdbID\n        plot\n        posterURL\n        title\n        tmdbID\n        imdbRating\n        metacriticRating\n        rottenTomatoesRating\n      }\n    }\n  }\n`;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n      this.state = {\n        popMovies: [],\n        simMovies: [],\n        recoMovies: [],\n        recentMovies: [],\n        userId: '',\n        favMovie: '',\n        menuActive: false,\n        loading: 'GET RECOMENDATIONS',\n    };\n  }\n\n  componentDidMount() {\n    this.getPopularMovies();\n    this.getRecentMovies();\n  }\n\n  searchHandler() {\n    this.setState({\n      loading: 'LOADING...'\n    }, async () => {\n      await this.getSimilarMovies();\n      await this.getMoviesForUser();\n      this.setState({loading: 'GET RECOMENDATIONS'});\n    });\n  }\n\n  idInputHandler(event) {\n    this.setState({userId: event.target.value});\n  }\n\n  favInputHandler(event) {\n    this.setState({favMovie: event.target.value});\n  }\n\n  toggleHandler() {\n    this.setState({menuActive: !this.state.menuActive});\n  }\n\n  getPopularMovies = () => {\n    api\n      .post('', { query: GET_POPULAR_MOVIES })\n      .then(result => this.setState({popMovies: result.data.data.Movie[0].popular}))\n      .catch(error => console.log(error));\n  };\n\n  getRecentMovies = () => {\n    api\n      .post('', { query: GET_RECENT_MOVIES })\n      .then(result => this.setState({recentMovies: result.data.data.Movie[0].recent}))\n      .catch(error => console.log(error));\n  };\n\n  getSimilarMovies = () => {\n    api\n      .post('', { query: GET_SIMILAR_MOVIES(this.state.favMovie) })\n      .then(result => this.setState({simMovies: result.data.data.Movie[0].similar}))\n      .catch(error => console.log(error));\n  };\n\n  getMoviesForUser = () => {\n    api\n      .post('', { query: GET_MOVIES_FOR_USER(this.state.userId) })\n      .then(result => this.setState({recoMovies: result.data.data.User[0].recomended}))\n      //.then(result => console.log(result))\n      .catch(error => console.log(error));\n  };\n\n  render() {\n    return (\n      <div className='app'>\n        <Nav toggleHandler={this.toggleHandler.bind(this)}/>\n        <div className={this.state.menuActive === true ? ['menu-active'].join(' ') : 'menu-hidden'}>\n          <Menu\n            idInputHandler={this.idInputHandler.bind(this)}\n            favInputHandler={this.favInputHandler.bind(this)}\n            toggleHandler={this.toggleHandler.bind(this)}\n            searchHandler={this.searchHandler.bind(this)}\n            searchBtnContent={this.state.loading}\n          />\n        </div>\n        <div className='flex-row'>\n          <div className='movies'>\n            <div className='catagory-text'>{this.state.popMovies.length === 0 ? '' : 'Popular Movies'}</div>\n            <Movies movies={this.state.popMovies}/>\n            <div className='catagory-text'>{this.state.recentMovies.length === 0 ? '' : 'Recent Movies'}</div>\n            <Movies movies={this.state.recentMovies}/>\n            <div className='catagory-text'>{this.state.simMovies.length === 0 ? '' : 'Beacuse You Watched ' + this.state.favMovie}</div>\n            <Movies movies={this.state.simMovies}/>\n            <div className='catagory-text'>{this.state.recoMovies.length === 0 ? '' : 'Recomended For You'}</div>\n            <Movies movies={this.state.recoMovies}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({\n\turi: 'http://localhost:4000/'\n})\n\nconst Main = () => (\n\t<ApolloProvider client={client}>\n\t\t<App />\n\t</ApolloProvider>\n)\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}